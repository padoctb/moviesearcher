{"version":3,"sources":["img/no-poster-img.jpg","img/background.png","img/background-dark.png","img/icons/delete.svg","img/icons/moon.svg","img/icons/sun.svg","reducers/moviesListReducer.js","reducers/movieInfoReducer.js","reducers/favoritesMoviesReducer.js","reducers/appSettingsReducer.js","reducers/personInfoReducer.js","reducers/reducer.js","constants/moviesListConstants.js","constants/movieInfoConstants.js","constants/favoritesMoviesConstants.js","constants/appSettingsConstants.js","constants/personInfoConstants.js","store/index.js","styles/styled-components/globalStyle.js","components/Header.js","components/ContentContainer.js","components/Footer.js","components/MoviesList.js","components/Loader.js","actions/favoritesMoviesActions.js","components/MovieItem.js","config.js","hocs/withLocalization.js","actions/appSettingsActions.js","helpers/index.js","components/MovieInfo.js","components/Pagination.js","components/ScrollToTop.js","components/PersonInfo.js","actions/moviesListActions.js","containers/MoviesContainer.js","actions/movieInfoActions.js","containers/MovieInfoContainer.js","containers/FavoritesMoviesContainer.js","containers/SearchMovieContainer.js","containers/SettingsPanelContainer.js","actions/personInfoActions.js","containers/PersonInfoContainer.js","App.js","index.js"],"names":["module","exports","initialState","popular","isLoading","data","top_rated","moviesByGenre","title","findedMovies","favoritesMovies","JSON","parse","localStorage","getItem","lang","mainReducer","combineReducers","moviesListReducer","state","action","type","payload","GET_MOVIES_BY_SEARCH","GET_MOVIES_BY_GENRE_DATA","GET_MOVIES_DATA","dataType","moviesData","movieInfoReducer","GET_MOVIE_DATA","movieInfo","recommendations","movieRecommendations","favoritesMoviesReducer","appSettingsReducer","newLang","setItem","personInfoReducer","GET_PERSON_INFO","store","createStore","applyMiddleware","thunk","window","GlobalStyle","createGlobalStyle","theme","isDarkModeEnable","backgroundImageDark","backgroundImage","HeaderWrapper","styled","header","HeaderLink","Link","Header","to","Wrapper","div","isHidden","Title","h2","HideButton","ContentContainer","children","useState","toggleIsHidden","onClick","toUpperCase","slice","footer","a","Footer","href","List","ul","MoviesList","movies","max","map","movieData","key","id","Loader","className","toggleFavoritesMovie","favoritesFromLs","isMovieInFavorites","find","movie","filter","push","stringify","MovieImage","img","h3","FavoriteWrapper","FavoriteImage","RemoveButton","deleteIcon","MovieItem","isFavorite","dispatch","useDispatch","removeFromFavorites","e","preventDefault","src","poster_path","noPosterImg","API_KEY","LOCALIZATION","search","showMore","favorites","searchMovies","releaseDate","tagline","description","genres","page","of","addToFavorites","cast","showAllCast","name","birthday","deathday","placeOfBirth","biography","creditsByPerson","movieImages","director","withLocaliztion","Component","props","currentLang","useSelector","localizeText","text","toggleLang","loadData","url","fetch","json","jsonData","getFormattedDate","date","_date","Date","toLocaleDateString","month","day","year","ContentWrapper","MovieImageWrapper","MovieDescription","DescriptionItem","li","DescriptionTitle","DescriptionText","span","GenreList","GenreItem","FavoritesButton","GroupTitle","CastList","PersonItem","PersonImage","PersonInfo","PersonName","PersonCharacter","LeftSide","VoteNumber","color","withLocalization","isMovieInfoDataLoaded","release_date","overview","images","vote_average","crew","imagesForSlider","forEach","image","original","file_path","thumbnail","item","job","renderGenresList","genre","renderCastList","person","i","profile_path","character","descriptionItems","voteNumber","Number","css","getVoteWrapperColor","length","showPlayButton","showFullscreenButton","items","results","PagesRange","Page","active","Button","totalPages","currentPage","currentUrl","rightSidePages","leftSidePages","pages","unshift","replace","pageNumber","withRouter","history","useEffect","unlisten","listen","scrollTo","PersonDescription","PersonInfoList","PersonInfoItem","PersonInfoTitle","PersonInfoDescr","personData","place_of_birth","getMoviesByGenreAndGenreTitle","genreId","Promise","all","BottomContentWrapper","ShowMore","memo","genreType","getMoviesByGenre","getMoviesData","isMoviesDataLoaded","total_pages","loadMovieDataAndRecomendations","movieId","resolve","then","response","match","params","document","backdrops","getMovieData","Object","keys","TransitionGroup","CSSTransition","timeout","classNames","Input","input","NothingFound","findMovies","f","ms","isCooldown","apply","this","arguments","setTimeout","debounce","inputValue","query","getMoviesBySearch","value","setValue","isFindedMoviesLoaded","onChange","target","placeholder","ToggleThemeButton","sun","moon","ToggleLanguageButton","toggleDarkMode","getAllPersonData","personId","getPersonInfo","AllWrapper","Main","main","MOVIES","setTheme","render","moviesType","path","component","MovieInfoContainer","PersonInfoContainer","exact","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.12ce87c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-poster-img.f6209671.jpg\";","module.exports = __webpack_public_path__ + \"static/media/background.9b284953.png\";","module.exports = __webpack_public_path__ + \"static/media/background-dark.9a30e6c6.png\";","module.exports = __webpack_public_path__ + \"static/media/delete.1dca1cc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/moon.ce5810a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.af5bd09b.svg\";","import {\n  GET_MOVIES_DATA,\n  GET_MOVIES_BY_GENRE_DATA,\n  GET_MOVIES_BY_SEARCH,\n} from '../constants/moviesListConstants';\nimport { LOAD_START } from '../constants';\n\nconst initialState = {\n  popular: {\n    isLoading: false,\n    data: {},\n  },\n  top_rated: {\n    isLoading: false,\n    data: {},\n  },\n  moviesByGenre: {\n    isLoading: false,\n    data: {},\n    title: null,\n  },\n  findedMovies: {\n    isLoading: false,\n    data: {},\n  },\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_MOVIES_BY_SEARCH:\n      return {\n        ...state,\n        findedMovies: {\n          data: action.payload,\n          isLoading: false,\n        },\n      };\n\n    case GET_MOVIES_BY_SEARCH + LOAD_START:\n      return {\n        ...state,\n        findedMovies: {\n          ...state.findedMovies,\n          isLoading: true,\n        },\n      };\n\n    case GET_MOVIES_BY_GENRE_DATA + LOAD_START:\n      return {\n        ...state,\n        moviesByGenre: {\n          ...state.moviesByGenre,\n          isLoading: true,\n        },\n      };\n\n    case GET_MOVIES_BY_GENRE_DATA:\n      return {\n        ...state,\n        moviesByGenre: {\n          data: action.payload.data,\n          isLoading: false,\n          title: action.payload.title,\n        },\n      };\n\n    case GET_MOVIES_DATA + LOAD_START:\n      return {\n        ...state,\n        [action.payload.dataType]: {\n          ...state[action.payload.dataType],\n          isLoading: true,\n        },\n      };\n\n    case GET_MOVIES_DATA:\n      return {\n        ...state,\n        [action.payload.dataType]: {\n          ...state[action.payload.dataType],\n          data: action.payload.moviesData,\n          isLoading: false,\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n","import {GET_MOVIE_DATA} from '../constants/movieInfoConstants'\nimport {LOAD_START} from '../constants'\n\nconst initialState = {\n  isLoading: false,\n  data: {}\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n\n  case GET_MOVIE_DATA + LOAD_START:\n    return {\n      ...state,\n      isLoading: true\n    }\n\n  case GET_MOVIE_DATA:\n    return {\n      ...state,\n      isLoading: false,\n      data: action.payload.movieInfo,\n      recommendations: action.payload.movieRecommendations\n    }\n\n  default:\n    return state\n  }\n}\n","import {TOGGLE_FAVORITE_MOVIE} from '../constants/favoritesMoviesConstants'\n\nconst initialState = {\n  favoritesMovies: JSON.parse(localStorage.getItem('favoritesMovies')) ? JSON.parse(localStorage.getItem('favoritesMovies')) : []\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n\n  case TOGGLE_FAVORITE_MOVIE:\n    return {\n      ...state,\n      favoritesMovies: action.payload\n    }\n\n  default:\n    return state\n  }\n}\n","import {TOGGLE_LANGUAGE} from '../constants/appSettingsConstants'\n\nconst initialState = {\n  lang: localStorage.getItem('lang') || 'ru'\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n\n  case TOGGLE_LANGUAGE:\n    const newLang = state.lang === 'ru' ? 'en' : 'ru'\n    localStorage.setItem('lang', newLang)\n    return {\n      ...state,\n      lang: newLang\n    }\n\n  default:\n    return state\n  }\n}\n","import {GET_PERSON_INFO} from '../constants/personInfoConstants'\nimport {LOAD_START} from '../constants'\n\nconst initialState = {\n  isLoading: true,\n  data: {}\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n\n  case GET_PERSON_INFO + LOAD_START:\n    return {\n      ...state,\n      isLoading: true\n    }\n\n  case GET_PERSON_INFO:\n    return {\n      ...state,\n      isLoading: false,\n      data: action.payload\n    }\n    \n  default:\n    return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport moviesListReducer from './moviesListReducer'\nimport movieInfoReducer from './movieInfoReducer'\nimport favoritesMoviesReducer from './favoritesMoviesReducer'\nimport appSettingsReducer from './appSettingsReducer'\nimport personInfoReducer from './personInfoReducer'\n\nconst mainReducer = combineReducers({\n  moviesListReducer,\n  movieInfoReducer,\n  favoritesMoviesReducer,\n  appSettingsReducer,\n  personInfoReducer\n})\n\nexport default mainReducer","export const GET_MOVIES_DATA = 'GET_MOVIES_DATA'\nexport const GET_MOVIES_BY_GENRE_DATA = 'GET_MOVIES_BY_GENRE_DATA'\nexport const GET_MOVIES_BY_SEARCH = 'GET_MOVIES_BY_SEARCH'","export const GET_MOVIE_DATA = 'GET_MOVIE_DATA'","export const TOGGLE_FAVORITE_MOVIE = 'TOGGLE_FAVORITE_MOVIE'","export const TOGGLE_LANGUAGE = 'TOGGLE_LANGUAGE'","export const GET_PERSON_INFO = 'GET_PERSON_INFO'","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\nimport mainReducer from '../reducers/reducer'\n\nconst store = createStore(mainReducer, applyMiddleware(thunk))\nwindow.store = store\n\nexport default store\n","import { createGlobalStyle } from 'styled-components'\nimport backgroundImage from '../../img/background.png'\nimport backgroundImageDark from '../../img/background-dark.png'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-image: url(${({theme}) => !theme.isDarkModeEnable ? backgroundImage : backgroundImageDark});\n    font-family: 'Roboto', sans-serif;\n    font-size: 14px;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    min-height: 100vh;\n    flex-direction: column;\n  }\n`\n\nexport default GlobalStyle","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst HeaderWrapper = styled.header`\n  height: 60px;\n  background-color: ${({theme}) => theme.isDarkModeEnable ? '#292929' : '#3F7FBF'};\n  color: #fff;\n  font-size: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst HeaderLink = styled(Link)`\n  text-decoration: none;\n  color: #fff;\n  font-weight: 600;\n  &:hover {\n    opacity: .8;\n  }\n  &:active {\n    opacity: .6;\n  }\n`\n\nconst Header = () => (\n  <HeaderWrapper>\n    <HeaderLink to='/moviesearcher'>React Movie Searcher</HeaderLink>\n  </HeaderWrapper>\n)\n\nexport default Header\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  padding: 16px;\n  max-width: 700px;\n  background-color: #fff;\n  margin: 20px auto;\n  border-radius: 5px;\n  box-shadow: 0px 9px 10px 1px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  max-height: ${({ isHidden }) => (isHidden ? '10px' : 'auto')};\n  position: relative;\n`;\n\nconst Title = styled.h2`\n  margin: 0;\n  font-size: 14px;\n  color: #444444;\n  margin-bottom: 10px;\n`;\n\nconst HideButton = styled.div`\n  position: absolute;\n  right: 14px;\n  font-size: 20px;\n  font-weight: 600;\n  border: solid #3a3a3a;\n  border-width: 0 4px 4px 0;\n  display: inline-block;\n  padding: 4px;\n  cursor: pointer;\n  opacity: 0.4;\n  transform: ${({ isHidden }) => (isHidden ? 'rotate(44deg)' : 'rotate(-135deg)')};\n  &:hover {\n    opacity: 0.7;\n  }\n`;\n\nconst ContentContainer = ({ children, title }) => {\n  const [isHidden, toggleIsHidden] = useState(false);\n\n  return (\n    <Wrapper isHidden={isHidden}>\n      <HideButton isHidden={isHidden} onClick={() => toggleIsHidden(!isHidden)}></HideButton>\n      <Title>{title && title[0].toUpperCase() + title.slice(1)}</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nContentContainer.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string\n}\n\nexport default ContentContainer;\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.footer`\n  background-color: #232323;\n  height: 100px;\n  color: #fff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #A0A0A0;\n  flex-direction: column;\n`\n\nconst Link = styled.a`\n  display: block;\n  color: #fff;\n  text-decoration: none;\n  opacity: .7;\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst Footer = () => {\n  return (\n    <Wrapper>\n      <Link href={'https://github.com/padoctb'}>  GitHub</Link>\n      <Link href={'https://developers.themoviedb.org/3/'}>API</Link>\n    </Wrapper>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport {MovieItem} from '../components'\n\nconst Wrapper = styled.div`\n\n`\n\nconst List = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  padding: 0;\n  margin: 0;\n`\n\nconst MoviesList = ({movies, max}) => {\n  if(max) movies = movies.slice(0, max)\n  \n  return (\n    <Wrapper>\n      <List>\n        {movies.map(movieData => (\n          <MovieItem key={movieData.id} movieData={movieData}/>\n        ))}\n      </List>\n    </Wrapper>\n  )\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n  max: PropTypes.number\n}\n\nexport default MoviesList\n","import React from 'react'\n\nconst Loader = () => {\n  return <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n}\n\nexport default Loader\n","import { TOGGLE_FAVORITE_MOVIE } from '../constants/favoritesMoviesConstants';\n\nexport const toggleFavoritesMovie = movieData => {\n  let favoritesFromLs = JSON.parse(localStorage.getItem('favoritesMovies'));\n\n  if (!favoritesFromLs) localStorage.setItem('favoritesMovies', JSON.stringify([movieData]));\n  else {\n    const isMovieInFavorites = favoritesFromLs.find(movie => movie.id === movieData.id);\n    if (isMovieInFavorites) {\n      favoritesFromLs = favoritesFromLs.filter(movie => movie.id !== isMovieInFavorites.id);\n    } else {\n      favoritesFromLs.push(movieData);\n    }\n    localStorage.setItem('favoritesMovies', JSON.stringify(favoritesFromLs));\n  }\n\n  return {\n    type: TOGGLE_FAVORITE_MOVIE,\n    payload: JSON.parse(localStorage.getItem('favoritesMovies')),\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { toggleFavoritesMovie } from '../actions/favoritesMoviesActions';\nimport deleteIcon from '../img/icons/delete.svg';\nimport noPosterImg from '../img/no-poster-img.jpg';\n\nconst Wrapper = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  width: 100px;\n  border-radius: 5px;\n  margin: 5px;\n  padding: 10px;\n  box-shadow: 0px 3px 7px -4px rgba(0, 0, 0, 0.5);\n  transition: transform 0.2s ease;\n  display: block;\n  cursor: pointer;\n  text-decoration: none;\n  &:hover {\n    transform: translateY(-5px);\n  }\n`;\n\nconst MovieImage = styled.img`\n  width: 100%;\n  height: auto;\n  border-radius: 5px;\n`;\n\nconst Title = styled.h3`\n  color: #444444;\n  font-size: 14px;\n  flex-grow: 1;\n`;\n\nconst FavoriteWrapper = styled(Link)`\n  display: flex;\n  box-shadow: 0px 4px 10px 1px rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  border-radius: 5px;\n  overflow: hidden;\n  text-decoration: none;\n  align-items: center;\n  transition: transform 0.2s ease;\n  &:hover {\n    transform: translateY(-3px);\n  }\n`;\n\nconst FavoriteImage = styled.img`\n  width: 38px;\n  height: auto;\n  margin-right: 10px;\n`;\n\nconst RemoveButton = styled.div`\n  margin-right: 20px;\n  margin-left: 10px;\n  padding: 5px;\n  background-color: #a93f3f;\n  border-radius: 5px;\n  color: #fff;\n  height: 20px;\n  min-width: 20px;\n  text-align: center;\n  background-image: url(${deleteIcon});\n  background-size: 16px 16px;\n  background-repeat: no-repeat;\n  background-position: center;\n  &:hover {\n    background-color: #843636;\n  }\n  &:active {\n    background-color: #662929;\n  }\n`;\n\nconst MovieItem = ({ movieData, isFavorite }) => {\n  const dispatch = useDispatch();\n\n  const removeFromFavorites = e => {\n    e.preventDefault();\n    dispatch(toggleFavoritesMovie(movieData));\n  };\n\n  const defaultRender = () => (\n    <Wrapper to={`/moviesearcher/movie/${movieData.id}`}>\n      <MovieImage src={movieData.poster_path ? `https://image.tmdb.org/t/p/w500/${movieData.poster_path}` : noPosterImg} />\n      <Title>{movieData.title}</Title>\n    </Wrapper>\n  );\n\n  const isFavoriteRender = () => (\n    <FavoriteWrapper to={`/moviesearcher/movie/${movieData.id}`}>\n      <FavoriteImage src={movieData.poster_path ? `https://image.tmdb.org/t/p/w500/${movieData.poster_path}` : noPosterImg} />\n      <Title>{movieData.title}</Title>\n      <RemoveButton onClick={removeFromFavorites} />\n    </FavoriteWrapper>\n  );\n\n  return isFavorite ? isFavoriteRender() : defaultRender();\n};\n\nMovieItem.propTypes = {\n  movieData: PropTypes.object.isRequired,\n  isFavorite: PropTypes.bool,\n};\n\nexport default MovieItem;\n","export const API_KEY = 'b6d2e3a714047dd33bb390fcbc6cdc5f';\nexport const LOCALIZATION = {\n  search: ['Поиск', 'Search'],\n  popular: ['Популярные фильмы', 'Popular Movies'],\n  top_rated: ['Лучшие фильмы', 'Top Rated Movies'],\n  showMore: ['Показать больше', 'Show more'],\n  favorites: ['Избранное', 'Favorites'],\n  searchMovies: ['Поиск фильмов...', 'Search movies...'],\n  releaseDate: ['Дата выхода', 'Release date'],\n  tagline: ['Слоган', 'Tagline'],\n  description: ['Описание', 'Description'],\n  genres: ['Жанры', 'Genres'],\n  recommendations: ['Рекомендации', 'Recomendations'],\n  page: ['Страница', 'Page'],\n  of: ['из', 'of'],\n  addToFavorites: ['Добавить в избранные', 'Add to favorites'],\n  removeFromFavorites: ['Убрать из избранного', 'Remove from favorites'],\n  cast: ['Актёрский состав', 'Cast'],\n  showAllCast: ['Показать весь список', 'Show all cast'],\n  name: ['Имя', 'Name'],\n  birthday: ['День рождения', 'Birthday'],\n  deathday: ['День смерти', 'Deathday'],\n  placeOfBirth: ['Место рождения', 'Place of birth'],\n  biography: ['Биография', 'Biography'],\n  creditsByPerson: ['Фильмы с участием', 'Movies featuring'],\n  movieImages: ['Изображения фильма', 'Movie images'],\n  director: ['Режисер', 'Director']\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleLanguage } from '../actions/appSettingsActions';\nimport { LOCALIZATION } from '../config';\n\nconst withLocaliztion = Component => props => {\n  const currentLang = useSelector(({ appSettingsReducer }) => appSettingsReducer.lang);\n\n  const dispatch = useDispatch();\n\n  const toggleLang = () => dispatch(toggleLanguage());\n\n  const localize = text => {\n    if (!LOCALIZATION[text]) return 'Localize is not found';\n    if (currentLang === 'ru') return LOCALIZATION[text][0];\n    if (currentLang === 'en') return LOCALIZATION[text][1];\n  };\n\n  return (\n    <Component\n      localizeText={localize}\n      toggleLang={toggleLang}\n      currentLang={currentLang}\n      {...props}\n    />\n  );\n};\n\nexport default withLocaliztion;\n","import {TOGGLE_LANGUAGE} from '../constants/appSettingsConstants'\n\nexport const toggleLanguage = () => ({\n  type: TOGGLE_LANGUAGE\n})\n","export const debounce = (f, ms) => {\n  let isCooldown = false;\n\n  return function() {\n    if (isCooldown) return;\n\n    f.apply(this, arguments);\n\n    isCooldown = true;\n\n    setTimeout(() => {\n      isCooldown = false;\n    }, ms);\n  };\n};\n\nexport const loadData = async url => {\n  const data = await fetch(url);\n  const jsonData = await data.json();\n  return jsonData;\n};\n\nexport const getFormattedDate = (date, currentLang = 'en') => {\n  const _date = new Date(date);\n  return _date.toLocaleDateString(currentLang, {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  });\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, {css} from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { ContentContainer, Loader, MoviesList } from '../components';\nimport { toggleFavoritesMovie } from '../actions/favoritesMoviesActions';\nimport noPosterImg from '../img/no-poster-img.jpg';\nimport ImageGallery from 'react-image-gallery';\nimport withLocalization from '../hocs/withLocalization';\nimport {getFormattedDate} from '../helpers'\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  @media screen and (max-width: 750px) {\n    flex-direction: column;\n  }\n`;\n\nconst MovieImageWrapper = styled.div`\n  width: 300px;\n  height: 500px;\n  position: relative;\n  @media screen and (max-width: 500px) {\n    width: 100%;\n    height: auto;\n  }\n`;\n\nconst MovieImage = styled.img`\n  width: 100%;\n  height: auto;\n  border-radius: 5px;\n`;\n\nconst MovieDescription = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: 70px;\n  margin-top: 40px;\n  @media screen and (max-width: 750px) {\n    margin-left: 0;\n  }\n`;\n\nconst DescriptionItem = styled.li`\n  margin-bottom: 10px;\n`;\n\nconst DescriptionTitle = styled.h3`\n  display: inline;\n  color: #444444;\n  font-size: 15px;\n`;\n\nconst DescriptionText = styled.span``;\n\nconst GenreList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nconst GenreItem = styled(Link)`\n  color: #444444;\n  text-decoration: none;\n  padding: 5px;\n  display: block;\n  background: #ebebeb;\n  border-radius: 5px;\n  margin-right: 5px;\n  margin-top: 5px;\n  &:hover {\n    background: #dddddd;\n  }\n`;\n\nconst FavoritesButton = styled.div`\n  padding: 10px;\n  background-color: ${({ isMovieInFavorites }) => (isMovieInFavorites ? '#a93f3f' : '#3f7fbf')};\n  color: #fff;\n  border-radius: 5px;\n  text-align: center;\n  margin-top: 10px;\n  cursor: pointer;\n  &:hover {\n    background-color: ${({ isMovieInFavorites }) => (isMovieInFavorites ? '#843636' : '#316ba6')};\n  }\n  &:active {\n    background-color: #2f6091;\n    background-color: ${({ isMovieInFavorites }) => (isMovieInFavorites ? '#662929' : '#2f6091')};\n  }\n`;\n\nconst GroupTitle = styled(DescriptionTitle)`\n  margin-top: 20px;\n  display: block;\n`;\n\nconst CastList = styled.div`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  margin-top: 10px;\n  max-height: 400px;\n  overflow: auto;\n`;\n\nconst PersonItem = styled(Link)`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  cursor: pointer;\n  text-decoration: none;\n  &:hover {\n    background-color: #e3e3e3;\n  }\n`;\n\nconst PersonImage = styled.img`\n  width: 60px;\n  height: auto;\n`;\n\nconst PersonInfo = styled.div`\n  margin-left: 10px;\n  color: #444444;\n`;\n\nconst PersonName = styled.div`\n  font-weight: 600;\n`;\n\nconst PersonCharacter = styled.div``;\n\nconst LeftSide = styled.div``;\n\nconst VoteNumber = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  background: rgb(2, 0, 36);\n  padding: 10px;\n  border-bottom-left-radius: 15px;\n  font-size: 18px;\n  color: #fff;\n  font-weight: 600;\n  box-shadow: -2px 9px 10px 1px rgba(0, 0, 0, 0.2);\n  background: rgb(2,0,36);\n  ${({color}) => color};\n`;\n\nconst MovieInfo = ({ movieData, isMovieInfoDataLoaded, localizeText, currentLang }) => {\n  const {\n    title,\n    poster_path,\n    release_date,\n    tagline,\n    overview,\n    genres,\n    id,\n    recommendations,\n    cast,\n    images,\n    vote_average,\n    crew,\n  } = movieData;\n\n  const dispatch = useDispatch();\n\n  const imagesForSlider = [];\n\n  if (images)\n    images.forEach(image =>\n      imagesForSlider.push({\n        original: `https://image.tmdb.org/t/p/w500/${image.file_path}`,\n        thumbnail: `https://image.tmdb.org/t/p/w500/${image.file_path}`,\n      }),\n    );\n\n  const favoritesMovies = useSelector(\n    ({ favoritesMoviesReducer }) => favoritesMoviesReducer.favoritesMovies,\n  );\n\n  const isMovieInFavorites = favoritesMovies && favoritesMovies.find(movie => movie.id === id);\n\n  const director = isMovieInfoDataLoaded && crew.find(item => item.job === 'Director');\n\n  const getVoteWrapperColor = () => {\n    const voteNumber = Number(vote_average)\n    if(voteNumber >= 7) return css`\n      background: linear-gradient(201deg, rgba(2,0,36,1) 0%, rgba(38,121,9,1) 0%, rgba(19,167,132,1) 45%, rgba(13,181,170,1) 57%, rgba(0,212,255,1) 100%);\n    `\n    if(voteNumber >= 4) return css`\n      background: linear-gradient(201deg, rgba(2,0,36,1) 0%, rgba(208,199,46,1) 0%, rgba(147,163,21,1) 45%, rgba(170,175,32,1) 59%, rgba(167,176,44,1) 100%);\n    `\n    return css`\n      background: linear-gradient(201deg, rgba(2,0,36,1) 0%, rgba(152,29,29,1) 0%, rgba(223,78,78,1) 45%, rgba(158,23,23,1) 63%, rgba(65,15,15,1) 100%);\n    `\n  }\n\n  const renderGenresList = (\n    <GenreList>\n      {genres &&\n        genres.map(genre => (\n          <li key={genre.id}>\n            <GenreItem to={`/movieseacher/genre/${genre.id}/page/1`}>{genre.name}</GenreItem>\n          </li>\n        ))}\n    </GenreList>\n  );\n\n  const renderCastList = (\n    <CastList>\n      {cast &&\n        cast.map((person, i) => {\n          return (\n            <PersonItem to={`/movieseacher/person/${person.id}`} key={person.id}>\n              <PersonImage\n                src={\n                  person.profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${person.profile_path}`\n                    : noPosterImg\n                }\n              />\n              <PersonInfo id=\"person-info\">\n                <PersonName>{person.name}</PersonName>\n                <PersonCharacter>{person.character}</PersonCharacter>\n              </PersonInfo>\n            </PersonItem>\n          );\n        })}\n    </CastList>\n  );\n\n  const renderImages = () => {\n    if (imagesForSlider.length === 0) return null;\n    return (\n      <>\n        <GroupTitle>{localizeText('movieImages')}: </GroupTitle>\n        <ImageGallery showPlayButton={false} showFullscreenButton={false} items={imagesForSlider} />\n      </>\n    );\n  };\n\n  const renderRecommendations = () => {\n    if (recommendations.results.length === 0) return null;\n    return (\n      <>\n        <GroupTitle>{localizeText('recommendations')}: </GroupTitle>\n        <MoviesList max={5} movies={recommendations.results} />\n      </>\n    );\n  };\n\n  const descriptionItems = [\n    {\n      title: localizeText('releaseDate'),\n      type: getFormattedDate(release_date, currentLang),\n    },\n    {\n      title: localizeText('director'),\n      type: director.name,\n    },\n    {\n      title: localizeText('tagline'),\n      type: tagline,\n    },\n    {\n      title: localizeText('description'),\n      type: overview,\n    },\n    {\n      title: localizeText('genres'),\n      type: renderGenresList,\n    },\n    {\n      title: localizeText('cast'),\n      type: renderCastList,\n    },\n  ];\n\n  return (\n    <>\n      <ContentContainer title={title}>\n        {isMovieInfoDataLoaded ? (\n          <ContentWrapper>\n            <LeftSide>\n              <MovieImageWrapper>\n                <MovieImage\n                  src={poster_path ? `https://image.tmdb.org/t/p/w500/${poster_path}` : noPosterImg}\n                />\n                <VoteNumber color={getVoteWrapperColor()}>{vote_average}</VoteNumber>\n              </MovieImageWrapper>\n              <FavoritesButton\n                isMovieInFavorites={isMovieInFavorites}\n                onClick={() => dispatch(toggleFavoritesMovie(movieData))}\n              >\n                {isMovieInFavorites\n                  ? localizeText('removeFromFavorites')\n                  : localizeText('addToFavorites')}\n              </FavoritesButton>\n            </LeftSide>\n\n            <MovieDescription>\n              {descriptionItems.map(item => {\n                if (!item.type) return null;\n                return (\n                  <DescriptionItem key={item.title}>\n                    <DescriptionTitle>{`${item.title}: `}</DescriptionTitle>\n                    <DescriptionText>{item.type}</DescriptionText>\n                  </DescriptionItem>\n                );\n              })}\n            </MovieDescription>\n          </ContentWrapper>\n        ) : (\n          <Loader />\n        )}\n        {isMovieInfoDataLoaded && renderImages()}\n        {isMovieInfoDataLoaded && renderRecommendations()}\n      </ContentContainer>\n    </>\n  );\n};\n\nMovieInfo.propTypes = {\n  movieData: PropTypes.object.isRequired,\n  isMovieInfoDataLoaded: PropTypes.bool.isRequired,\n};\n\nexport default withLocalization(MovieInfo);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport withLocalization from '../hocs/withLocalization';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 16px;\n  width: 400px;\n`;\n\nconst PagesRange = styled.div`\n  font-size: 16px;\n  color: #393939;\n  display: flex;\n  list-style: none;\n  align-items: center;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n`;\n\nconst Page = styled(Link)`\n  display: block;\n  color: #393939;\n  text-decoration: none;\n  font-size: 18px;\n  border-top: 1px solid #e3e3e3;\n  border-bottom: 1px solid #e3e3e3;\n  padding: 8px 0;\n  cursor: pointer;\n  background-color: ${({ active }) => (active ? '#e3e3e3' : '#fff')};\n  text-align: center;\n  flex-grow: 1;\n  &:hover {\n    background-color: #e3e3e3;\n  }\n  &:last-child {\n    border-right: 1px solid #e3e3e3;\n  }\n  &:first-child {\n    border-left: 1px solid #e3e3e3;\n  }\n`;\n\nconst Button = styled(Link)`\n  display: block;\n  font-size: initial;\n  font-weight: 600;\n  font-size: 24px;\n  cursor: pointer;\n  padding: 10px;\n  color: #232323;\n  opacity: 0.5;\n  text-decoration: none;\n  &:hover {\n    opacity: 0.8;\n  }\n  &:active {\n    opacity: 1;\n  }\n`;\n\nconst Pagination = ({ totalPages, currentPage, currentUrl }) => {\n  const paginationRange = 4;\n\n  const rightSidePages =\n    totalPages - +currentPage >= paginationRange ? paginationRange : totalPages - +currentPage;\n\n  const leftSidePages = +currentPage - paginationRange > 0 ? paginationRange : +currentPage - 1;\n\n  const pages = [+currentPage];\n\n  for (let i = 0; i < rightSidePages; i++) {\n    pages.push(i + 1 + +currentPage);\n  }\n\n  for (let i = 0; i < leftSidePages; i++) {\n    pages.unshift(+currentPage - i - 1);\n  }\n\n  return (\n    <Wrapper>\n      <Button to={currentUrl.replace(/\\d+$/gi, 1)}>{'<<'}</Button>\n      <PagesRange>\n        {pages.map(pageNumber => (\n          <Page\n            to={currentUrl.replace(/\\d+$/gi, pageNumber)}\n            active={pageNumber === +currentPage ? 1 : 0}\n            key={pageNumber}\n          >\n            {pageNumber}\n          </Page>\n        ))}\n      </PagesRange>\n      <Button to={currentUrl.replace(/\\d+$/gi, totalPages)}>{'>>'}</Button>\n    </Wrapper>\n  );\n};\n\nPagination.propTypes = {\n  totalPages: PropTypes.number.isRequired,\n  currentPage: PropTypes.string.isRequired,\n  currentUrl: PropTypes.string.isRequired,\n};\n\nexport default withLocalization(Pagination);\n","import { useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nfunction ScrollToTop({ history }) {\n  useEffect(() => {\n    const unlisten = history.listen(() => {\n      window.scrollTo(0, 0);\n    });\n    return () => {\n      unlisten();\n    }\n  }, [history]);\n\n  return (null);\n}\n\nexport default withRouter(ScrollToTop);","import React from 'react'\nimport styled from 'styled-components'\nimport noPosterImg from '../img/no-poster-img.jpg'\nimport PropTypes from 'prop-types'\nimport withLocalization from '../hocs/withLocalization'\nimport MoviesList from './MoviesList'\n\nconst Wrapper = styled.div`\n\n`\n\nconst PersonImage = styled.img`\n  display: block;\n  margin: 0 auto;\n  width: 300px;\n  height: auto;\n  @media screen and (max-width: 425px) {\n    width: 100%;\n  }\n`\n\nconst PersonDescription = styled.div`\n\n`\n\nconst PersonInfoList = styled.ul`\n  list-style: none;\n  margin: 30px 0;\n  padding: 0;\n`\n\nconst PersonInfoItem = styled.li``\n\nconst PersonInfoTitle = styled.h3``\n\nconst PersonInfoDescr = styled.div``\n\nconst PersonInfo = ({personData, localizeText}) => {\n  const {profile_path, name, birthday, place_of_birth, deathday, biography, movies} = personData\n\n  const renderMoviesList = () => <MoviesList movies={movies}/>\n\n  const descriptionItems = [\n    {\n      title: localizeText('name'),\n      type: name,\n    },\n    {\n      title: localizeText('birthday'),\n      type: birthday,\n    },\n    {\n      title: localizeText('deathday'),\n      type: deathday,\n    },\n    {\n      title: localizeText('placeOfBirth'),\n      type: place_of_birth,\n    },\n    {\n      title: localizeText('biography'),\n      type: biography,\n    },\n    {\n      title: localizeText('creditsByPerson'),\n      type: renderMoviesList(),\n    },\n  ];\n\n  return (\n    <Wrapper>\n      <PersonImage src={profile_path ? `https://image.tmdb.org/t/p/w500/${profile_path}` : noPosterImg}/>\n      <PersonDescription>\n        <PersonInfoList>\n          {descriptionItems.map((item) => {\n            if(!item.type) return null;\n            return (\n              <PersonInfoItem key={item.title}>\n                <PersonInfoTitle>{item.title}</PersonInfoTitle>\n                <PersonInfoDescr>{item.type}</PersonInfoDescr>\n              </PersonInfoItem>\n            )\n          })}\n        </PersonInfoList>\n      </PersonDescription>\n    </Wrapper>\n  )\n}\n\nPersonInfo.propTypes = {\n  personData: PropTypes.object.isRequired\n}\n\nexport default withLocalization(PersonInfo)\n","import {\n  GET_MOVIES_DATA,\n  GET_MOVIES_BY_GENRE_DATA,\n  GET_MOVIES_BY_SEARCH,\n} from '../constants/moviesListConstants';\nimport { LOAD_START } from '../constants';\nimport { API_KEY } from '../config';\nimport { loadData } from '../helpers';\n\nconst getMoviesByGenreAndGenreTitle = async (genreId, page, currentLang) => {\n  const data = await Promise.all([\n    loadData(\n      `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=${currentLang}&include_adult=false&include_video=false&page=${page}&with_genres=${genreId}`,\n    ),\n    loadData(`https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=${currentLang}`),\n  ]);\n  return data;\n};\n\nexport const getMoviesBySearch = (query, currentLang) => {\n  return async dispatch => {\n    dispatch({\n      type: GET_MOVIES_BY_SEARCH + LOAD_START,\n    });\n\n    const findedMovies = await loadData(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=${currentLang}&query=${query}&page=1&include_adult=true`,\n    );\n\n    dispatch({\n      type: GET_MOVIES_BY_SEARCH,\n      payload: findedMovies,\n    });\n  };\n};\n\nexport const getMoviesData = (dataType, page = 1, currentLang) => {\n  return async dispatch => {\n    dispatch({\n      type: GET_MOVIES_DATA + LOAD_START,\n      payload: {\n        dataType,\n      },\n    });\n\n    const moviesData = await loadData(\n      `https://api.themoviedb.org/3/movie/${dataType}?api_key=${API_KEY}&language=${currentLang}&page=${page}`,\n    );\n\n    dispatch({\n      type: GET_MOVIES_DATA,\n      payload: {\n        dataType,\n        moviesData,\n      },\n    });\n  };\n};\n\nexport const getMoviesByGenre = (genreId, page = 1, currentLang) => {\n  return async dispatch => {\n    dispatch({\n      type: GET_MOVIES_BY_GENRE_DATA + LOAD_START,\n    });\n\n    const moviesData = await getMoviesByGenreAndGenreTitle(genreId, page, currentLang);\n\n    dispatch({\n      type: GET_MOVIES_BY_GENRE_DATA,\n      payload: {\n        data: moviesData[0],\n        title: moviesData[1].genres.find(genre => genre.id === Number(genreId)).name,\n      },\n    });\n  };\n};\n","import React, { useEffect, memo } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ContentContainer, MoviesList, Loader, Pagination } from '../components';\nimport { getMoviesData, getMoviesByGenre } from '../actions/moviesListActions';\nimport withLocalization from '../hocs/withLocalization';\n\nconst BottomContentWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst ShowMore = styled(Link)`\n  display: block;\n  color: #fff;\n  text-decoration: none;\n  background-color: #3f7fbf;\n  border-radius: 5px;\n  display: inline-block;\n  padding: 10px;\n  margin: 20px 0 10px 0;\n  &:hover {\n    background-color: #316ba6;\n  }\n  &:active {\n    background-color: #2f6091;\n  }\n`;\n\nconst MoviesContainer = ({ type, title, genreType, page, url, localizeText, currentLang }) => {\n  const moviesData = useSelector(({ moviesListReducer }) =>\n    genreType ? moviesListReducer.moviesByGenre : moviesListReducer[type],\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (genreType) dispatch(getMoviesByGenre(genreType.genreId, page, currentLang));\n    else dispatch(getMoviesData(type, page, currentLang));\n  }, [type, dispatch, genreType, page, currentLang]);\n\n  const isMoviesDataLoaded = !moviesData.isLoading && moviesData.data.results;\n\n  return (\n    <ContentContainer title={title ? title : moviesData.title}>\n      {isMoviesDataLoaded ? <MoviesList movies={moviesData.data.results} /> : <Loader />}\n      {isMoviesDataLoaded && (\n        <BottomContentWrapper>\n          {!page ? (\n            <ShowMore to={`/moviesearcher/movies/${type}/page/1`}>{localizeText('showMore')}</ShowMore>\n          ) : (\n            <Pagination\n              currentUrl={url}\n              currentPage={page}\n              totalPages={moviesData.data.total_pages}\n            />\n          )}\n        </BottomContentWrapper>\n      )}\n    </ContentContainer>\n  );\n};\n\nMoviesContainer.propTypes = {\n  type: PropTypes.string,\n  title: PropTypes.string,\n  genreType: PropTypes.object,\n  page: PropTypes.string,\n  url: PropTypes.string,\n};\n\nexport default memo(withLocalization(MoviesContainer));\n","import { API_KEY } from '../config';\nimport { LOAD_START } from '../constants';\nimport { GET_MOVIE_DATA } from '../constants/movieInfoConstants';\nimport { loadData } from '../helpers';\n\nconst loadMovieDataAndRecomendations = (movieId, currentLang) =>\n  new Promise(resolve => {\n    Promise.all([\n      loadData(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=${currentLang}&with_cast`,\n      ),\n      loadData(\n        `https://api.themoviedb.org/3/movie/${movieId}/recommendations?api_key=${API_KEY}&language=${currentLang}&page=1`,\n      ),\n      loadData(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=${currentLang}`,\n      ),\n      loadData(`https://api.themoviedb.org/3/movie/${movieId}/images?api_key=${API_KEY}`),\n    ]).then(response => resolve(response));\n  });\n\nexport const getMovieData = (movieId, currentLang) => {\n  return async dispatch => {\n    dispatch({\n      type: GET_MOVIE_DATA + LOAD_START,\n    });\n\n    const moviesData = await loadMovieDataAndRecomendations(movieId, currentLang);\n\n    moviesData[0].recommendations = moviesData[1];\n    moviesData[0].cast = moviesData[2].cast;\n    moviesData[0].crew = moviesData[2].crew;\n    moviesData[0].images = moviesData[3].backdrops;\n\n    dispatch({\n      type: GET_MOVIE_DATA,\n      payload: {\n        movieInfo: moviesData[0],\n      },\n    });\n  };\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getMovieData } from '../actions/movieInfoActions';\nimport { MovieInfo } from '../components';\nimport withLocalization from '../hocs/withLocalization';\n\nconst MovieInfoContainer = ({ match, currentLang }) => {\n  const isLoading = useSelector(({ movieInfoReducer }) => movieInfoReducer.isLoading);\n  const movieData = useSelector(({ movieInfoReducer }) => movieInfoReducer.data);\n\n  const dispatch = useDispatch();\n\n  const movieId = match.params.movieId;\n\n  useEffect(() => {\n    if(movieData.title) document.title = movieData.title\n    return () => {\n      document.title = 'Moviesearcher'\n    }\n  })\n\n  useEffect(() => {\n    dispatch(getMovieData(movieId, currentLang));\n  }, [movieId, dispatch, currentLang]);\n\n  const isMovieInfoDataLoaded = !isLoading && Object.keys(movieData).length > 0;\n\n  return <MovieInfo isMovieInfoDataLoaded={isMovieInfoDataLoaded} movieData={movieData} />;\n};\n\nMovieInfoContainer.propTypes = {\n  match: PropTypes.object.isRequired,\n};\n\nexport default withLocalization(MovieInfoContainer);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { ContentContainer, MovieItem } from '../components';\nimport '../styles/css/style.css';\nimport withLocalization from '../hocs/withLocalization'\n\nconst FavoritesMoviesContainer = ({localizeText}) => {\n  const favoritesMovies = useSelector(\n    ({ favoritesMoviesReducer }) => favoritesMoviesReducer.favoritesMovies,\n  );\n\n  const renderFavoritesList = () => (\n    <TransitionGroup className=\"todo-list\">\n      {favoritesMovies.map(movie => (\n        <CSSTransition key={movie.id} timeout={500} classNames=\"favorite-movie-item\">\n          <MovieItem isFavorite movieData={movie} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n\n  return (\n    <ContentContainer title={localizeText('favorites')}>\n      {favoritesMovies.length > 0 ? renderFavoritesList() : 'Favorites list is empty'}\n    </ContentContainer>\n  );\n};\n\nexport default withLocalization(FavoritesMoviesContainer);\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { ContentContainer, MoviesList, Loader } from '../components';\nimport { debounce } from '../helpers';\nimport { getMoviesBySearch } from '../actions/moviesListActions';\nimport withLocalization from '../hocs/withLocalization'\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 12px;\n  box-sizing: border-box;\n  border-radius: 5px;\n  border: 1px solid #a0a0a0;\n  outline: none;\n  font-family: 'Roboto', sans-serif;\n  &:focus {\n    border: 1px solid #3f7fbf;\n  }\n`;\n\nconst NothingFound = styled.div`\n  margin-top: 10px;\n`;\n\nconst findMovies = debounce((inputValue, dispatch, currentLang) => {\n  dispatch(getMoviesBySearch(inputValue, currentLang));\n}, 500);\n\nconst SearchMovieContainer = ({ title, localizeText, currentLang }) => {\n  const [value, setValue] = useState('');\n\n  const dispatch = useDispatch();\n\n  const findedMovies = useSelector(\n    ({ moviesListReducer }) => moviesListReducer.findedMovies.data.results,\n  );\n  const isLoading = useSelector(\n    ({ moviesListReducer }) => moviesListReducer.findedMovies.isLoading,\n  );\n\n  const isFindedMoviesLoaded = !isLoading && findedMovies;\n\n  const handleChange = e => {\n    if (e.target.value < 2) findMovies('', dispatch, currentLang);\n    setValue(e.target.value);\n    findMovies(e.target.value, dispatch, currentLang);\n  };\n\n  const renderResult = () => {\n    if (value.length < 2) return null;\n    if (isFindedMoviesLoaded) {\n      if (findedMovies.length > 0) return <MoviesList max={5} movies={findedMovies} />;\n      else return <NothingFound>Nothing found</NothingFound>;\n    }\n    return <Loader />;\n  };\n\n  return (\n    <ContentContainer title={title}>\n      <Input onChange={handleChange} placeholder={localizeText('searchMovies')} value={value} />\n      {renderResult()}\n    </ContentContainer>\n  );\n};\n\nexport default withLocalization(SearchMovieContainer);\n","import React from 'react';\nimport styled from 'styled-components';\nimport moon from '../img/icons/moon.svg';\nimport sun from '../img/icons/sun.svg';\nimport withLocalization from '../hocs/withLocalization'\n\nconst Wrapper = styled.div`\n  max-width: 700px;\n  margin: 10px auto;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`;\n\nconst ToggleThemeButton = styled.div`\n  width: 20px;\n  height: 20px;\n  background-image: url(${({ theme }) => (!theme.isDarkModeEnable ? moon : sun)});\n  background-size: 100% 100%;\n  cursor: pointer;\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst ToggleLanguageButton = styled.div`\n  margin-right: 10px;\n  font-weight: 600;\n  color: #444444;\n  color: ${({ theme }) => (!theme.isDarkModeEnable ? '#444444' : '#fff')};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst SettingsPanelContainer = ({ toggleDarkMode, currentLang, toggleLang }) => {\n\n  const themeButtonClick = () =>\n    toggleDarkMode(state => {\n      localStorage.setItem('isDarkModeEnable', !state.isDarkModeEnable);\n\n      return {\n        ...state,\n        isDarkModeEnable: !state.isDarkModeEnable,\n      };\n    });\n\n  return (\n    <Wrapper>\n      <ToggleLanguageButton onClick={toggleLang}>\n        {currentLang.toUpperCase()}\n      </ToggleLanguageButton>\n      <ToggleThemeButton onClick={themeButtonClick} />\n    </Wrapper>\n  );\n};\n\nexport default withLocalization(SettingsPanelContainer);\n","import {loadData} from '../helpers'\nimport {API_KEY} from '../config'\nimport {GET_PERSON_INFO} from '../constants/personInfoConstants'\nimport {LOAD_START} from '../constants'\n\nconst getAllPersonData = async (personId, currentLang) => {\n  const data = await Promise.all([\n    loadData(\n      `https://api.themoviedb.org/3/person/${personId}?api_key=${API_KEY}&language=${currentLang}`,\n    ),\n    loadData(`https://api.themoviedb.org/3/person/${personId}/movie_credits?api_key=${API_KEY}&language=${currentLang}`),\n  ]);\n  return data;\n};\n\nexport const getPersonInfo = (personId, currentLang) => async (dispatch) => {\n  dispatch({\n    type: GET_PERSON_INFO + LOAD_START\n  })\n\n  const personData = await getAllPersonData(personId, currentLang)\n\n  personData[0].movies = personData[1].cast\n\n  dispatch({\n    type: GET_PERSON_INFO,\n    payload: personData[0]\n  })\n}\n\n\n\n\n","import React, {useEffect} from 'react'\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {ContentContainer, PersonInfo, Loader} from '../components'\nimport withLocalization from '../hocs/withLocalization'\nimport {getPersonInfo} from '../actions/personInfoActions'\n\nconst PersonInfoContainer = ({match, currentLang}) => {\n\n  const dispatch = useDispatch()\n\n  const isLoading = useSelector(({ personInfoReducer }) => personInfoReducer.isLoading);\n  const personData = useSelector(({ personInfoReducer }) => personInfoReducer.data);\n\n  const personId = match.params.personId;\n\n  useEffect(() => {\n    dispatch(getPersonInfo(personId, currentLang))\n  }, [personId, currentLang, dispatch])\n\n  const isMovieInfoDataLoaded = !isLoading && Object.keys(personData).length > 0;\n\n  return (\n    <ContentContainer title={isMovieInfoDataLoaded ? personData.name : ''}>\n      {isMovieInfoDataLoaded ? <PersonInfo personData={personData}/> : <Loader/>}\n    </ContentContainer>\n  )\n}\n\nPersonInfoContainer.propTypes = {\n  match: PropTypes.object.isRequired,\n  currentLang: PropTypes.string.isRequired\n}\n\nexport default withLocalization(PersonInfoContainer)\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { ThemeProvider } from 'styled-components';\nimport { Route, Switch } from 'react-router-dom';\nimport GlobalStyle from './styles/styled-components/globalStyle';\nimport { Header, Footer } from './components';\nimport MoviesContainer from './containers/MoviesContainer';\nimport MovieInfoContainer from './containers/MovieInfoContainer';\nimport FavoritesMoviesContainer from './containers/FavoritesMoviesContainer';\nimport SearchMovieContainer from './containers/SearchMovieContainer';\nimport SettingsPanelContainer from './containers/SettingsPanelContainer';\nimport PersonInfoContainer from './containers/PersonInfoContainer';\nimport withLocaliztion from './hocs/withLocalization';\n\nconst AllWrapper = styled.div`\n  display: flex;\n  min-height: 100vh;\n  flex-direction: column;\n`;\n\nconst Main = styled.main`\n  margin: 10px;\n  flex: 1;\n`;\n\nfunction App({ localizeText }) {\n  const MOVIES = [\n    {\n      title: localizeText('popular'),\n      type: 'popular',\n    },\n    {\n      title: localizeText('top_rated'),\n      type: 'top_rated',\n    },\n  ];\n\n  const [theme, setTheme] = useState({\n    isDarkModeEnable:\n      localStorage.getItem('isDarkModeEnable') !== null\n        ? JSON.parse(localStorage.getItem('isDarkModeEnable'))\n        : false,\n  });\n\n  const renderMovies = () =>\n    MOVIES.map(({ title, type }) => <MoviesContainer key={type} title={title} type={type} />);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AllWrapper>\n        <GlobalStyle />\n        <Header />\n        <Main>\n          <SettingsPanelContainer toggleDarkMode={setTheme} />\n          <SearchMovieContainer title={localizeText('search')} />\n          <FavoritesMoviesContainer />\n          <Switch>\n            <Route\n              render={({ match }) => (\n                <MoviesContainer\n                  title={localizeText(match.params.moviesType)}\n                  url={match.url}\n                  page={match.params.page}\n                  type={match.params.moviesType}\n                />\n              )}\n              path=\"/moviesearcher/movies/:moviesType/page/:page\"\n            />\n            <Route\n              render={({ match }) => (\n                <MoviesContainer\n                  url={match.url}\n                  page={match.params.page}\n                  genreType={{ genreId: match.params.genreId }}\n                />\n              )}\n              path=\"/moviesearcher/genre/:genreId/page/:page\"\n            />\n            <Route component={MovieInfoContainer} path=\"/moviesearcher/movie/:movieId\" />\n            <Route component={PersonInfoContainer} path=\"/moviesearcher/person/:personId\" />\n            <Route component={() => renderMovies()} exact path=\"/moviesearcher/\" />\n          </Switch>\n        </Main>\n        <Footer />\n      </AllWrapper>\n    </ThemeProvider>\n  );\n}\n\nexport default withLocaliztion(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport store from './store';\nimport App from './App';\nimport {ScrollToTop} from './components'\nimport './styles/css/style.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <ScrollToTop/>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}